(function() {
  window.addEventListener('load', init);
  const APIkey = "WJ2S8Y8BM204TYD6"
  const filePath = 'nasdaq_security_list.csv';  
  let globalYTDTrack = 0;
  let globalStockRes;
  let globalSPRes;
  let ticker;
  let lastUpdatedYear;
  let tickerSymbols = []; 
  let buyCandidates = [];
  let moonCandidates = [];
  let pennyCandidates = [];
  let superGainerCandidates = [];
  let freshHotBuyCandidates = [];
  let currCount = 1;
  let exploreTicker = '';
  
  // Sets up default page behavior
  function init() {
    document.getElementById('new_research').addEventListener('click', conductNewResearch); 
    document.getElementById('submission_research').addEventListener('click', function(el) {
      // prevent automatic page refresh behavior
      el.preventDefault();
      doResearch(); 
    }); 
  }

  // Changes views to show conduct new research
  function conductNewResearch() {
    document.querySelector('.new_port').style.display = 'block';
    document.querySelector('#new_research').style.display = 'none';
    readNasdaqSecurities();
    // Explore a new stock market security roughly every second and a half
    setInterval(doResearch, 1400);
  }

  // Code partially generated by Large Language Model (LLM)
  function readNasdaqSecurities() {
    // Fetch the CSV file
    fetch(filePath)
    .then(response => response.text())
    .then(data => {
      // Split the contents into lines
      const lines = data.split('\n');

      const headers = lines[0].split(',');
      const columnIndex = headers.indexOf('Symbol');

      // Extract the column values
      for (let i = 1; i < lines.length; i++) {
        const columns = lines[i].split(',');
        // Check if the column value exists
        if (columns[columnIndex]) { 
          // Trim whitespace and push to tickerSymbols array
          tickerSymbols.push(columns[columnIndex].trim()); 
        }
      }
    })
    .catch(error => console.error('Error fetching file:', error));
  }
  
  // Leverages the power of fortune teller research mode to make buy decisions 
  // about all ticker symbols, and then categorizes ticker symbols into different types
  // of "buys", based upon their qualities and trends exhibited
  function doResearch() {
      if (currCount % 20 == 0) {
        console.log("next ticker to exlpore")
        console.log(tickerSymbols[currCount])
      }
      // Extract ticker symbol from the user
      ticker = tickerSymbols[currCount];
      let URL = "https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=" + ticker + "&apikey=" + APIkey;
      fetch(URL)
        .then(statusCheck)
        .then(res => res.json())
        .then(calculateResearch)
        .catch(handleErr);
  }

  // Calculates a stock / security price and corresponding info based upon what stock, 
  // when the user invested, and how much they put into the security / stock.
  function calculateResearch(res) {
      lastUpdatedYear = res['Meta Data']['3. Last Refreshed'].split('-')[0]
      // console.log(res['Error Message'].includes("Invalid API call. Please retry or visit the documentation (https://www.alphavantage.co/documentation/) for TIME_SERIES_WEEKLY_ADJUSTED."))
      // let bob = "Bob";
      if (res && res['Error Message'] && res['Error Message'].includes("Invalid API call.")) {
        document.getElementById('research_stock_ticker').value = '';
      }
      globalStockRes = res;
      var updatedInfo = res['Weekly Adjusted Time Series'];
      ticker = ticker.toLowerCase();
      if (lastUpdatedYear >= 2024) {
        calculateMomentum(res);
      } else {
        // console.log("old, outdated, non-existent stock in 2024")
        let index = buyCandidates.indexOf(exploreTicker);
        if (index !== -1) { // If the item exists in the array
            buyCandidates.splice(index, 1); // Remove the item at the found index
        }
      }
  }

  // Looks at 10, 5, 2, and 1 year (YTD) intervals of the stocks performance across 
  // each of these windows. Assigns a rating to the stock based upon its performance over a 10 year 
  // and 5 year timeline. Also calculates the YTD performance of the stock vs the S&P500 as a benchmark
  function calculateMomentum(res) {
    var updatedInfo = res['Weekly Adjusted Time Series'];
    // Grab the current date that the user searched on (today's date)
    let currDate = Object.keys(updatedInfo)[0];
    let dateArray = currDate.split('-');
    let currYear = dateArray[0];
    let currMonth = dateArray[1];
    let currDay = dateArray[2];

    let tenOldYear = currYear - 10;
    let fiveOldYear = currYear - 5;
    let twoOldYear = currYear - 2;
    let oneOldYear = currYear - 1;
    var updatedInfo = res['Weekly Adjusted Time Series'];

    // Finds the closest entry to the respective date (in this case 10 years ago from when the user searched)
    // and returns the corresponding index to be used in calculating the return based upon that yield
    indexTen = findEntry(tenOldYear, currMonth, currDay, res);
    tenYearAdjClose = updatedInfo[Object.keys(updatedInfo)[indexTen]]['5. adjusted close'];

    indexFive = findEntry(fiveOldYear, currMonth, currDay, res);
    fiveYearAdjClose = updatedInfo[Object.keys(updatedInfo)[indexFive]]['5. adjusted close'];

    indexStart = findEntry(2020, 9, 21, res);
    startAdjClose = updatedInfo[Object.keys(updatedInfo)[indexStart]]['5. adjusted close'];

    indexTwo = findEntry(twoOldYear, currMonth, currDay, res);
    twoYearAdjClose = updatedInfo[Object.keys(updatedInfo)[indexTwo]]['5. adjusted close'];

    indexOne = findEntry(oneOldYear, currMonth, currDay, res);
    oneYearAdjClose = updatedInfo[Object.keys(updatedInfo)[indexOne]]['5. adjusted close'];

    indexYTD = findEntry(currYear, 1, 1, res);
    YTDAdjClose = updatedInfo[Object.keys(updatedInfo)[indexYTD]]['5. adjusted close'];

    // The market price of what the security is currently going for on the stock market
    let marketPrice = updatedInfo[Object.keys(updatedInfo)[0]]['5. adjusted close'];
    calculateSP500Rating(((10000 / YTDAdjClose) * marketPrice));
  }

  // Bulk function to display all of the yields tenYear to YTD.
  function displayYieldValues(initialInvestment, tenYearAdjClose, fiveYearAdjClose, twoYearAdjClose, startAdjClose, oneYearAdjClose, YTDAdjClose, marketPrice) {
    let scalerContainer = document.getElementById('investment_scaler_container');
    // Check to see if the scalerContainerAlready exists, and if it does get rid of itself
    // to make room for new content
    if (scalerContainer) {
      document.getElementById('momentum').removeChild(scalerContainer);
    } 
    let investmentScalerContainer = document.createElement('div');
    investmentScalerContainer.id = 'investment_scaler_container';
    
    // Calculate initial investment yields based upon the $10,000 invested figure 
    let investmentValueTenYearsLater = ((initialInvestment / tenYearAdjClose) * marketPrice);
    let investmentValueFiveYearsLater = ((initialInvestment / fiveYearAdjClose) * marketPrice);
    let investmentValueTwoYearsLater = ((initialInvestment / twoYearAdjClose) * marketPrice);
    let investmentValueStartLater = ((initialInvestment / startAdjClose) * marketPrice);
    let investmentValueOneYearLater = ((initialInvestment / oneYearAdjClose) * marketPrice);
    let investmentValueYTDLater = ((initialInvestment / YTDAdjClose) * marketPrice);

    // Display the value that the security would be worth today if it was purchased 
    // in a $10,000 amount 10 years ago
    let tenValue = document.createElement('p');
    let tenRating = document.createElement('p');
    // Note that this score is based on my own algorithm using the 10000 investment standard, 
    // and accordingly the user is not allowed to alter this value (it would not affect the score anyways even if they could)
    tenRatingScore = stockRatingTenYrYield(((10000 / tenYearAdjClose) * marketPrice));
    tenValue.textContent = "Your investment's 10-year yield would be: " + investmentValueTenYearsLater.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
    tenRating.textContent = "Your investment's 10-year yield is rated at: " + tenRatingScore;
    // investmentScalerContainer.appendChild(tenValue);
    // investmentScalerContainer.appendChild(tenRating);

    let fiveValue = document.createElement('p');
    let fiveRating = document.createElement('p');
    fiveRatingScore = stockRatingFiveYrYield(((10000 / fiveYearAdjClose) * marketPrice));
    fiveValue.textContent = "Your investment's 5-year yield would be: " + investmentValueFiveYearsLater.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
    fiveRating.textContent = "Your investment's 5-year yield is rated at: " + fiveRatingScore;
    // investmentScalerContainer.appendChild(fiveValue);
    // investmentScalerContainer.appendChild(fiveRating);

    // Also display my start date for fun
    let startValue = document.createElement('p');
    startValue.textContent = "Your investment's yield since Elias' start (9/21/20) would be: " + investmentValueStartLater.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
    // investmentScalerContainer.appendChild(startValue);

    let twoValue = document.createElement('p');
    twoValue.textContent = "Your investment's 2-year yield would be: " + investmentValueTwoYearsLater.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
    // investmentScalerContainer.appendChild(twoValue);

    let oneValue = document.createElement('p');
    oneValue.textContent = "Your investment's 1-year yield would be: " + investmentValueOneYearLater.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
    // investmentScalerContainer.appendChild(oneValue);

    document.getElementById('momentum').insertAdjacentElement("afterbegin", investmentScalerContainer);
  }

  // "Grades" the stock based upon how much the investment grew to from an 
  // initial $10,000 investment over 10 years. 
  // NOTE: This is subjective and my personal rating system based upon 
  // researching and being involved in the stock market for four years and change (no pun intended)
  // Returns: A numeric letter rating of how the security did over the given period
  function stockRatingTenYrYield(yieldValue) {
    let TenYearYieldRating; 
    if (yieldValue >= 150000) {
      TenYearYieldRating = "A+";
    } else if (yieldValue >= 100000) {
      TenYearYieldRating = "A";
    } else if (yieldValue >= 90000) {
      TenYearYieldRating = "A-";
    } else if (yieldValue >= 80000) {
      TenYearYieldRating = "B+";
    } else if (yieldValue >= 70000) {
      TenYearYieldRating = "B";
    } else if (yieldValue >= 60000) {
      TenYearYieldRating = "B-";
    } else if (yieldValue >= 50000) {
      TenYearYieldRating = "C+";
    } else if (yieldValue >= 40000) {
      TenYearYieldRating = "C";
    } else if (yieldValue >= 30000) {
      TenYearYieldRating = "C-";
    } else if (yieldValue >= 20000) {
      TenYearYieldRating = "D";
    } else if (yieldValue >= 10000) {
      TenYearYieldRating = "D-";
    } else {
      TenYearYieldRating = "F";
    }
    return TenYearYieldRating;
  }

  // "Grades" the stock based upon how much the investment grew to from an 
  // initial $10,000 investment over four years. 
  // NOTE: This is subjective and my personal rating system based upon 
  // researching and being involved in the stock market for four years and change (no pun intended)
  // Returns: A numeric letter rating of how the security did over the given period
  function stockRatingFiveYrYield(yieldValue) {
    let FiveYearYieldRating; 
    if (yieldValue >= 32500) {
      FiveYearYieldRating = "A+";
    } else if (yieldValue >= 20000) {
      FiveYearYieldRating = "A";
    } else if (yieldValue >= 17500) {
      FiveYearYieldRating = "A-";
    } else if (yieldValue >= 15000) {
      FiveYearYieldRating = "B";
    } else if (yieldValue >= 10000) {
      FiveYearYieldRating = "C";
    } else if (10000 > yieldValue >= 7500) {
      FiveYearYieldRating = "D";
    } else {
      FiveYearYieldRating = "F";
    }
    return FiveYearYieldRating;
  }

  // Calculates the SP500 Rating (using as a measurable standard to compare a security against)
  // NOTE: "VOO" represents Vanguard's particular S&P500 security tracker, but this is an arbitrary selection
  // In the personal finance / brokerage community, people generally tend to lean towards Vanguard for mutual funds / etfs, 
  // hence this is used as the standard to compare against here.
  function calculateSP500Rating(stockYTD) {
    let URL = "https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=" + "VOO" + "&apikey=" + APIkey;
    fetch(URL)
      .then(statusCheck)
      .then(res => res.json())
      .then(SP500YTD)
      .catch(handleErr);
  }

  // Tracks how much the security has grew since the YTD (January 1st of the current year)
  // Assumes that the security should be outperforming the S&P500 in order to receive 
  // a positive rating, and hence is simply a measurement to be compared 
  // with other tools to determine a security's actual value or investment worth.
  function SP500YTD(res) {
    globalSPRes = res;
    var updatedInfo = res['Weekly Adjusted Time Series'];
    let marketPrice500 = updatedInfo[Object.keys(updatedInfo)[0]]['5. adjusted close'];
    let YTDAdjClose500 = updatedInfo[Object.keys(updatedInfo)[indexYTD]]['5. adjusted close'];
    let investmentValue500YTDLater = ((10000 / YTDAdjClose500) * marketPrice500);
    let SP500Rating;
    if (globalYTDTrack >= (investmentValue500YTDLater * 1.2)) {
      SP500Rating = "A"
    } else if (globalYTDTrack >= (investmentValue500YTDLater * 1.1)) {
      SP500Rating = "B"
    } else if (globalYTDTrack >= (investmentValue500YTDLater * 1.025)) {
      SP500Rating = "B-"
    } else if ((investmentValue500YTDLater * 0.975) <= globalYTDTrack < (investmentValue500YTDLater * 1.025)) {
      SP500Rating = "C"
    } else if (globalYTDTrack < (investmentValue500YTDLater * 0.975)) {
      SP500Rating = "C-"
    } else if (globalYTDTrack < (investmentValue500YTDLater * 0.95)) {
      SP500Rating = "D"
    } else if (globalYTDTrack < (investmentValue500YTDLater * 0.90)) {
      SP500Rating = "F"
    }
    // let SP500Txt = document.createElement('p');
    // SP500Txt.textContent = "Your investment's YTD-yield vs. the S&P500 is rated at: " + SP500Rating;
    // document.getElementById('momentum').appendChild(SP500Txt);
    calculatePerformanceVSSP500(res);
  }

  // Calculates how many years the stock has outperformed the S&P500, (also shows how the YTD % change feature that can be toggled on/off)
  // Is also color coded to be red if the stock's ratio is less than 1 (indicating losses) or green (> 1 means gains). Same goes for S&P500
  // also fix the updating that completely clears the SPPerformance feature: 
  // and creates a detailed report with which exact years it outperformed the S&P500 in terms of yield
  // Only starts looking at the earliest year both the stock being researched / S&P500 have market info for valid comparison
  // of the overlapping year ranges. 
  function calculatePerformanceVSSP500(res) {
    let updatedStockInfo = globalStockRes['Weekly Adjusted Time Series'];
    let updatedSPInfo = globalSPRes['Weekly Adjusted Time Series'];
    // Use our existing functions to figure out the oldest date the stock is on the market (of API data)
    let oldestStockDate = findOldestEntry(globalStockRes['Weekly Adjusted Time Series']);
    let parsedStockDate = oldestStockDate.split("-")
    let startingStockYear = parsedStockDate[0];
    startingStockYear = parseInt(startingStockYear);
    // Take the next year after the earliest stock year to have a guaranteed January start to the year
    let oldestSPDate = findOldestEntry(globalSPRes['Weekly Adjusted Time Series']);
    let parsedSPDate = oldestSPDate.split("-")
    let startingSPYear = parsedSPDate[0];
    startingSPYear = parseInt(startingSPYear);

    // Set the universal stock year to be the latest possible year (max) between the two securities
    let universalStartYear = Math.max(startingSPYear, startingStockYear);
    universalStartYear = parseInt(universalStartYear);
    let universalEndYearDate = Object.keys(globalStockRes['Weekly Adjusted Time Series'])[0];
    let universalEndYearArray = universalEndYearDate.split("-")
    let universalEndYear = universalEndYearArray[0]
    universalEndYear = parseInt(universalEndYear);

    let totalYears = 0;
    let outPerf = 0;
    let decYear = 0;
    let underPGain = 0;
    let underPLoss = 0;
    let consecOutPerform = 0;
    let consecYearStart = 0;
    let consecYearArray = [];
    let yesBuy = false;
    let mostRecentBuyYear;
    let firstEverBuyYear = 0;
    let recentOut = 0;
    let moonCandidate = false;
    let moonMultiplier = 0;
    let moonConfirmed = false;
    let pennyCandidate = false;
    let pennyConfirmed = false;
    let superGainerConfirmed = false;

    let summary = document.getElementById('summary');
    let overall_rating = document.getElementById('overall_rating');


    // Stops 2 years earlier than current year to ensure that YTD extends to proper range
    // Try only stopping 1 year before? We are missing all of 2023-2024.... bruh!
    for (let currYear = universalStartYear; currYear < universalEndYear; currYear++) {
      totalYears = totalYears + 1
      let januaryStockIndex = findEntry(currYear, 1, 1, globalStockRes);
      // Insert 1 year gap to simulate YTD calulcation
      let nextJanuaryStockIndex = findEntry(currYear + 1, 1, 1, globalStockRes);
      // Grab the adjusted close prices for the stock
      let januaryStockAdj = updatedStockInfo[Object.keys(updatedStockInfo)[januaryStockIndex]]['5. adjusted close'];
      let nextJanuaryStockAdj = updatedStockInfo[Object.keys(updatedStockInfo)[nextJanuaryStockIndex]]['5. adjusted close'];
      // Perform the same YTD calculation but for the S&P500
      let januarySPIndex = findEntry(currYear, 1, 1, globalSPRes);
      let nextJanuarySPIndex = findEntry(currYear + 1, 1, 1, globalSPRes);
      let januarySPAdj = updatedSPInfo[Object.keys(updatedSPInfo)[januarySPIndex]]['5. adjusted close'];
      let nextJanuarySPAdj = updatedSPInfo[Object.keys(updatedSPInfo)[nextJanuarySPIndex]]['5. adjusted close'];
      // Format the string for display to the user
      // let yearString = `${currYear}-${currYear + 1}`;
      // let yearArrayHeading = document.createElement('p');
      // yearArrayHeading.textContent = "" + yearString + "(" + ticker.toUpperCase() + ": " + (nextJanuaryStockAdj / januaryStockAdj).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) + ")";
      if (nextJanuaryStockAdj / januaryStockAdj < 1) {
        decYear = decYear + 1
      }
      if ((nextJanuaryStockAdj / januaryStockAdj < 0.40) && (nextJanuarySPAdj / januarySPAdj > 0.8)) {
        // This indicates stock volatility compared to market 
        // console.log("unacceptable. Stock just died randomly for no reason. ")
      } else if (nextJanuaryStockAdj / januaryStockAdj >= 1.2) {
        consecYearArray[consecOutPerform] = currYear;
        consecOutPerform = consecOutPerform + 1;
        if (consecYearStart == 0) {
          consecYearStart = currYear; 
        } else {
          if ((currYear - consecYearStart <= 3) && consecOutPerform >= 3) {
            if (firstEverBuyYear == 0) {
              firstEverBuyYear = Number(currYear + 1);
            }
            mostRecentBuyYear = Number(currYear + 1);
            yesBuy = true;
            // let buyRecommendation = document.createElement('h4');
            // buyRecommendation.textContent = "I would have bought this stock on January 1st of the year: " + Number(currYear + 1);
            // let yearsOutPerformed = document.createElement('p');
            // yearsOutPerformed.textContent = "Based upon the trend observed over these years: " + consecYearArray;
            // summary.appendChild(buyRecommendation);
            // summary.appendChild(yearsOutPerformed)
            consecYearStart = 0;
            consecOutPerform = 0;
            consecYearArray = [];
          } else if ((currYear - consecYearStart > 2)){
            consecYearStart = 0;
            consecOutPerform = 0;
            consecYearArray = [];
          }
        }
        
      }
      if (Number(universalEndYear - currYear) <= 4 && Number(januaryStockAdj) < 10) {
       
        if (Number(currYear + 1) == universalEndYear) {
          let januaryCurrentYearPrice = nextJanuaryStockAdj;
          let marketPriceCurrent = Number(updatedStockInfo[Object.keys(updatedStockInfo)[0]]['5. adjusted close']);
          if (marketPriceCurrent > (januaryCurrentYearPrice * 1.1) && marketPriceCurrent < 10) {
            pennyConfirmed = true;
            pennyCandidates.push(ticker.toUpperCase());
          }
        }
      }
      // Determine whether or not the stock exceeded the S&P500 for each year
      if (nextJanuarySPAdj / januarySPAdj > nextJanuaryStockAdj / januaryStockAdj) {
        // SPExceedDiv.appendChild(yearArrayHeading);
        // If the market did better than the stock, but the stock still gained value (ie > 1.0)
        if ((nextJanuaryStockAdj / januaryStockAdj) > 1) {
          // Increase the underperfomed but still gained counter
          underPGain = underPGain + 1;
        } else {
          underPLoss = underPLoss + 1;
        }
      } else {
        outPerf = outPerf + 1
        if (Number(currYear) == 2022 && (nextJanuaryStockAdj / januaryStockAdj) >= 1.1) {
          moonCandidate = true;
          moonMultiplier = (nextJanuaryStockAdj / januaryStockAdj);
        } else if (Number(currYear) == 2022 && (nextJanuaryStockAdj / januaryStockAdj) < 1.1) {
          moonCandidate = false;
          moonMultiplier = 0;
        }
        
        if (moonCandidate && Number(currYear) == 2023 && (nextJanuaryStockAdj / januaryStockAdj) >= 1.1 && (nextJanuaryStockAdj / januaryStockAdj) > moonMultiplier) {
          moonConfirmed = true;
        } else if (!moonCandidate && Number(currYear) == 2023) {
          moonCandidate = false;
          moonMultiplier = 0;
          moonConfirmed = false;
        }

        if (Number(universalEndYear - currYear) <= 4) {
          recentOut = recentOut + 1;
        } 
      }
    }

    // Super gainer candidates
    if (totalYears >= 12 && ((decYear / totalYears) <= 0.1 && recentOut >= 2)) {
      superGainerCandidates.push(ticker.toUpperCase())
      superGainerConfirmed = true;
    }
    let buyDecision = document.createElement('h3');
    buyDecision.classList.add('buy_decisions');
    
    if (yesBuy) {
      buyDecision.textContent = "Would I have bought this stock before:  Yes";
    } else {
      buyDecision.textContent = "Would I have bought this stock before:  Not Yet...";
    }

    let final_decision = document.createElement('h3');
    let justification = document.createElement('h4');
    let just_year = document.createElement('h4');
    let just_money = document.createElement('h4');
    let overallBuyForCurrentYear = false;
    if (moonConfirmed || (Number(universalEndYear - mostRecentBuyYear) <= 4 && recentOut >= 2) 
        || ((decYear / totalYears) <= 0.2 && recentOut >= 2) || (recentOut >= 3) || pennyConfirmed || superGainerConfirmed) {
      overallBuyForCurrentYear = true;
      if (lastUpdatedYear >= 2024) {
        buyCandidates.push(ticker.toUpperCase());
      }
    }
    if (overallBuyForCurrentYear) {
      final_decision.textContent = 'Is this stock a Buy Candidate in the year 2024: Yes'
      // Provide overall reasoning for the decision
      if (moonConfirmed) {
        moonCandidates.push(ticker.toUpperCase());
        justification.textContent = 'This stock seems positioned to outperform based on recent trends and could skyrocket';
      } else if (superGainerConfirmed) {
        justification.textContent = 'This stock has proven to be significantly outperforming the market and is a super gainer';
      } else if ((Number(universalEndYear - mostRecentBuyYear) <= 4 && recentOut >= 2)) {
        justification.textContent = 'This stock would have been bought within the last few years, and has beat the market on average during the last few years';
      } else if ((recentOut >= 3)){
        justification.textContent = 'This stock has beat the market significantly in recent years and warrants attention';
      } else if (pennyConfirmed) {
        justification.textContent = 'This stock is very cheap and has the potential to explode if the company is promising';
      } else if (((decYear / totalYears) <= 0.2 && recentOut >= 2)) {
        justification.textContent = 'This stock has historically gained value and remains relevant in the current market';
      }

      if (Number(mostRecentBuyYear) > 0) {
        just_year.textContent = 'The most recent buy year for this stock was: ' + mostRecentBuyYear;
        indexMostRecentBuy = findEntry(Number(mostRecentBuyYear), 1, 1, globalStockRes);
        mostRecentBuyAdjClose = updatedStockInfo[Object.keys(updatedStockInfo)[indexMostRecentBuy]]['5. adjusted close'];
        let marketPriceStock = updatedStockInfo[Object.keys(updatedStockInfo)[0]]['5. adjusted close'];
        let calculatedValue = (1000 / mostRecentBuyAdjClose) * marketPriceStock;
        just_money.textContent = 'If you would have put $1,000 into this stock on Jan 1st of the above year, your investment would now be worth: $' + Number(calculatedValue).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
      }
    } else {
      final_decision.textContent = 'Should you buy this stock in the year 2024: No';
      justification.textContent = 'This stock did not consistently gain or beat the market during the last few years';
    }

    let hotFreshStock = document.createElement('h3');
    if (firstEverBuyYear == universalEndYear) {
      freshHotBuyCandidates.push(ticker.toUpperCase());
      hotFreshStock.textContent = 'This stock would have just been purchased for the first time in the current year: ' + Number(universalEndYear);
    }

    let final_decision_greeting = document.createElement('h2');
    final_decision_greeting.textContent = 'Overall Decision for Stock:';
    moonConfirmed = false;
    if (currCount % 20 == 0) {
      console.log("current count")
      console.log(currCount)
      console.log("We got your buy candidates here:")
      console.log(buyCandidates)
      console.log("We got your moon candidates here:")
      console.log(moonCandidates)
      console.log("We got your freshHot 2024 buys here:")
      console.log(freshHotBuyCandidates)
      console.log("We got your penny candidates here:")
      console.log(pennyCandidates)
      console.log("We got your super gainer candidates here:")
      console.log(superGainerCandidates)
    }
    currCount++;
  }

  // Finds the closest entry in the API week list based upon 
  // a provided year, month, and date. Returns the index of the week which 
  // is cloest to the provided year, month and day input. 
  // Returns: The closest index (entry) in API response to the given date the user is requesting 
  function findEntry(year, month, day, response) {
    var updatedInfo = response['Weekly Adjusted Time Series'];
    let length = Object.keys(updatedInfo).length
    let minIndex = 0;
    let min = 100000;
    for (let i = 0; i < length; i++) {
      let tuple = Object.keys(updatedInfo)[i]; 
      tupleData = tuple.split('-');
      if (tupleData[0] == year) {
        if (tupleData[1] == month) {
          // Check to see if the day is after or within 7 days (a week in time series) close to the user's date
          if (tupleData[2] >= day || (day > tupleData[2] && (Math.abs(tupleData[2] - day) <= 7))) {
            let temp = Math.abs((tupleData[2] / 7) - (day / 7));
            if (temp < min) {
              min = temp;
              minIndex = i; 
            }
          }
        }
      }
    }
    // return the minimum difference index between the date the user provided and the closest match in the weekly series
    return minIndex; 
  }

  // Finds the oldest possible API recorded entry of a particular stock. 
  // For example, the earliest AAPL was recorded for Alpha Vantage was 1999 although
  // the stock as been traded for many years before that date. Thus, we are working within
  // the constraints of the API. 
  // Returns: the oldest date entry (in API response) of a given security
  function findOldestEntry(security) {
    // Grab the length of the security, and return the last index of the keys (dates)
    let securityLength = Object.keys(security).length;
    return Object.keys(security)[securityLength - 1];
  }


  /**
   * checks the status of the response
   * @param {DOMList} res - the response 
   * @return {object} the response if it is valid and acceptable
   */
   async function statusCheck(res) {
    if (!res.ok) {
      throw new Error(await res.text());
    }
    return res;
  }

  /**
   * Handles an error produced from trying to fetch any of the possible endpoints
   */
   function handleErr() {
      console.log("there was an error, ruh roh!");
   }

})();